export enum Opcode {
	Unreachable = 0x00,
	NoOp = 0x01,
	Block = 0x02,
	Loop = 0x03,
	If = 0x04,
	Else = 0x05,
	End = 0x0B,
	Branch = 0x0C,
	BranchIf = 0x0D,
	BranchTable = 0x0E,
	Return = 0x0F,
	Call = 0x10,
	IndirectCall = 0x011,
	Drop = 0x1A,
	Select = 0x1B,
	GetLocal = 0x20,
	SetLocal = 0x21,
	TeeLocal = 0x22,
	GetGlobal = 0x23,
	SetGlobal = 0x24,
	LoadI32 = 0x28,
	LoadI64 = 0x29,
	LoadF32 = 0x2A,
	LoadF64 = 0x2B,
	LoadI8AsI32 = 0x2C,
	LoadU8AsI32 = 0x2D,
	LoadI16AsI32 = 0x2E,
	LoadU16AsI32 = 0x2F,
	LoadI8AsI64 = 0x30,
	LoadU8AsI64 = 0x31,
	LoadI16AsI64 = 0x32,
	LoadU16AsI64 = 0x33,
	LoadI32AsI64 = 0x34,
	LoadU32AsI64 = 0x35,
	StoreI32 = 0x36,
	StoreI64 = 0x37,
	StoreF32 = 0x38,
	StoreF64 = 0x39,
	StoreI32AsI8 = 0x3A,
	StoreI32AsI16 = 0x3B,
	StoreI64AsI8 = 0x3C,
	StoreI64AsI16 = 0x3D,
	StoreI64ASI32 = 0x3E,
	GetMemorySize = 0x3F,
	GrowMemory = 0x40,
	PushI32 = 0x41,
	PushI64 = 0x42,
	PushF32 = 0x43,
	PushF64 = 0x44,
	IsI32Zero = 0x45,
	I32Equals = 0x46,
	I32NotEquals = 0x47,
	I32LessThan = 0x48,
	U32LessThan = 0x49,
	I32GreaterThan = 0x4A,
	U32GreaterThan = 0x4B,
	I32LessOrEquals = 0x4C,
	U32LessOrEquals = 0x4D,
	I32GreaterOrEquals = 0x4E,
	U32GreaterOrEquals = 0x4F,
	IsI64Zero = 0x50,
	I64Equals = 0x51,
	I64NotEquals = 0x52,
	I64LessThan = 0x53,
	U64LessThan = 0x54,
	I64GreaterThan = 0x55,
	U64GreaterThan = 0x56,
	I64LessOrEquals = 0x57,
	U64LessOrEquals = 0x58,
	I64GreaterOrEquals = 0x59,
	U64GreaterOrEquals = 0x5A,
	F32Equals = 0x5B,
	F32NotEquals = 0x5C,
	F32LessThan = 0x5D,
	F32GreaterThan = 0x5E,
	F32LessOrEquals = 0x5F,
	F32GreaterOrEquals = 0x60,
	F64Equals = 0x61,
	F64NotEquals = 0x62,
	F64LessThan = 0x63,
	F64GreaterThan = 0x64,
	F64LessOrEquals = 0x65,
	F64GreaterOrEquals = 0x66,
	I32CountLeadingZeroes = 0x67,
	I32CountTrailingZeroes = 0x68,
	I32CountOnes = 0x69,
	AddI32s = 0x6A,
	MinusI32s = 0x6B,
	TimesI32s = 0x6C,
	DivideI32 = 0x6D,
	DivideU32 = 0x6E,
	ModuloI32s = 0x6F,
	ModuloU32s = 0x70,
	BitwiseAndI32s = 0x71,
	BitwiseOrI32s = 0x72,
	XorI32s = 0x73,
	ShiftLeftI32 = 0x74,
	ShiftRightI32 = 0x75,
	ShiftRightU32 = 0x76,
	RotateLeftI32 = 0x77,
	RotateRightI32 = 0x78,
	I64CountLeadingZeroes = 0x79,
	I64CountTrailingZeroes = 0x7A,
	I64CountOnes = 0x7B,
	AddI64s = 0x7C,
	MinusI64s = 0x7D,
	TimesI64s = 0x7E,
	DivideI64 = 0x7F,
	DivideU64 = 0x80,
	ModuloI64s = 0x81,
	ModuloU64s = 0x82,
	BitwiseAndI64s = 0x83,
	BitwiseOrI64s = 0x84,
	XorI64s = 0x85,
	ShiftLeftI64 = 0x86,
	ShiftRightI64 = 0x87,
	ShiftRightU64 = 0x88,
	RotateLeftI64 = 0x89,
	RotateRightI64 = 0x8A,
	F32AbsoluteValue = 0x8B,
	F32Negation = 0x8C,
	F32Ceiling = 0x8D,
	F32Floor = 0x8E,
	F32Truncate = 0x8F,
	RoundF32 = 0x90,
	F32SquareRoot = 0x91,
	AddF32s = 0x92,
	MinusF32s = 0x93,
	TimesF32s = 0x94,
	DivideF32 = 0x95,
	F32Minimum = 0x96,
	F32Maximum = 0x97,
	F32CopySign = 0x98,
	F64AbsoluteValue = 0x99,
	F64Negation = 0x9A,
	F64Ceiling = 0x9B,
	F64Floor = 0x9C,
	F64Truncate = 0x9D,
	RoundF64 = 0x9E,
	F64SquareRoot = 0x9F,
	AddF64s = 0xA0,
	MinusF64s = 0xA1,
	TimesF64s = 0xA2,
	DivideF64 = 0xA3,
	F64Minimum = 0xA4,
	F64Maximum = 0xA5,
	F64CopySign = 0xA6,
	I64ToI32 = 0xA7,
	F32ToI32 = 0xA8,
	F32ToU32 = 0xA9,
	F64ToI32 = 0xAA,
	F64ToU32 = 0xAB,
	I32ToI64 = 0xAC,
	I32ToU64 = 0xAD,
	F32ToI64 = 0xAE,
	F32ToU64 = 0xAF,
	F64ToI64 = 0xB0,
	F64ToU64 = 0xB1,
	I32ToF32 = 0xB2,
	U32ToF32 = 0xB3,
	I64ToF32 = 0xB4,
	U64ToF32 = 0xB5,
	F64ToF32 = 0xB6,
	I32ToF64 = 0xB7,
	U32ToF64 = 0xB8,
	I64ToF64 = 0xB9,
	U64ToF64 = 0xBA,
	F32ToF64 = 0xBB,
	F32AsI32 = 0xBC,
	F64AsI64 = 0xBD,
	I32AsF32 = 0xBE,
	I64AsF64 = 0xBF
}

export enum ValueType {
	I32 = 0x7F,
	I64 = 0x7E,
	F32 = 0x7D,
	F64 = 0x7C,
	V128 = 0x7B,
	FunctionReference = 0x70,
	ExternalReference = 0x6F,
	Function = 0x60,
	Result = 0x40
}

export type Type = { type: ValueType.Function, parameters: ValueType[], result: ValueType[] }

export enum SectionType {
	Custom,
	Type,
	Import,
	Function,
	Table,
	Memory,
	Global,
	Export,
	Start,
	Element,
	Code,
	Data,
	DataCount
}

export type Local = { type: ValueType, count: number }
export type WASMFunction = { instructions: number[], locals: Local[] }

export function toLEB128(integer: number | bigint) {
	if (typeof integer == `number`)
		integer = BigInt(integer)

	const integerLength = getIntegerLength(integer)
	const u8View = new Uint8Array(Math.ceil(integerLength / 7) + (integerLength % 7 ? 0 : 1))

	for (const byteIndex of u8View.keys())
		u8View[byteIndex] = Number((integer >> BigInt(byteIndex * 7)) & 0b0111_1111n) | 0b1000_0000

	u8View[u8View.length - 1] = u8View[u8View.length - 1]! & 0b0111_1111

	return u8View
}

export function getIntegerLength(number: bigint) {
	let length = 1

	number = number < 0n ? -number : number

	while (number >>= 1n)
		length++

	return length
}
